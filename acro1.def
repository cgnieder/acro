% --------------------------------------------------------------------------
% the ACRO package
% 
%   Typeset Acronyms
% 
% --------------------------------------------------------------------------
% Clemens Niederberger
% Web:    https://bitbucket.org/cgnieder/acro/
% E-Mail: contact@mychemistry.eu
% --------------------------------------------------------------------------
% Copyright 2011-2015 Clemens Niederberger
% 
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
% 
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Clemens Niederberger.
% --------------------------------------------------------------------------
% The acro package consists of the files
%  - acro.sty, acro0.def, acro1.def, acro_en.tex, acro_en.pdf, README
% --------------------------------------------------------------------------
% If you have any ideas, questions, suggestions or bugs to report, please
% feel free to contact me.
% --------------------------------------------------------------------------
\ProvidesFile{acro1.def}

% --------------------------------------------------------------------------
% additional variables:
\tl_new:N \l__acro_current_key_tl

% --------------------------------------------------------------------------
% key and order checking
\msg_new:nnn {acro} {no-id}
  { Something~has~gone~wrong,~you've~probably~forgotten~to~set~the~acronym~ID. }

\msg_new:nnn {acro} {before-short}
  {
    You've~set~The~key~`#2'~before~the~`short'~key~for~acronym~`#1'~but~
    needs~to~be~set~after~it.
  }

\msg_new:nnn {acro} {missing}
  { The~`#2'~key~for~acronym~`#1'~is~missing. }

\msg_new:nnn {acro} {doubled-key}
  {
    It~seems~to~me~you~have~used~the~`#1'~key~before.~If~you~haven't~there's~
    something~different~wrong~and~I'm~lost.~You~'re~on~your~own~now.
  }

\cs_new_protected:Npn \__acro_key_check:nn #1#2
  {
    \tl_if_blank:VT \l__acro_current_key_tl
      { \acro_serious_message:nn {acro} {no-id} }
    \bool_if:cF { l__acro_#1_short_set_bool }
      { \acro_serious_message:nnnn {acro} {before-short} {#1} {#2} }
    \bool_new:c { l__acro_#1_#2_set_bool }
    \bool_set_true:c { l__acro_#1_#2_set_bool }
  }

\cs_new_protected:Npn \__acro_first_key_check:n #1
  {
    \cs_if_exist:cTF { l__acro_#1_short_set_bool }
      {
         \bool_if:cT { l__acro_#1_short_set_bool }
           { \acro_serious_message:nnn {acro} {doubled-key} {#1} }
      }
      {
        \bool_new:c { l__acro_#1_short_set_bool }
        \bool_set_true:c { l__acro_#1_short_set_bool }
      }
  }

% --------------------------------------------------------------------------
% the internal selection functions:

% #1: name in associated cs
% #2: key name
% #3: action
\cs_new_protected:Npn \acro_declare_key_generic:nnn #1#2#3
  {
    \prop_new:c { l__acro_#1_prop }
    \cs_new_protected:cpn { __acro_declare_#1:nn } ##1##2
      {
        #3
      }
    \cs_generate_variant:cn { __acro_declare_#1:nn } { V }
    \keys_define:nn { acro / declare-acronym }
      {
        #2 .code:n =
          \use:c {__acro_declare_#1:Vn} \l__acro_current_key_tl {##1}
      }
  }
\cs_generate_variant:Nn \cs_generate_variant:Nn {c}

% #1: name in associated cs
% #2: key name
% #3: action
\cs_new_protected:Npn \acro_declare_key:nnn #1#2#3
  {
    \acro_declare_key_generic:nnn {#1} {#2}
      {
        \__acro_key_check:nn {##1} {#2}
        \prop_put:cnn { l__acro_#1_prop } {##1} {##2}
        #3
      }
  }

% #1: name in associated cs
% #2: key name
\cs_new_protected:Npn \acro_declare_key:nn #1#2
  { \acro_declare_key:nnn {#1} {#2} {} }
\cs_generate_variant:Nn \acro_declare_key:nn { V }

\cs_new_protected:Npn \acro_declare_simple_key:n #1
  {
    \tl_set:Nn \l__acro_tmpa_tl {#1}
    \tl_replace_all:Nnn \l__acro_tmpa_tl {-} {_}
    \acro_declare_key:Vn \l__acro_tmpa_tl {#1}
  }

% #1: new alias key
% #2: old key
\cs_new_protected:Npn \acro_declare_key_alias:nn #1#2
  {
    \keys_define:nn { acro / declare-acronym }
      { #1 .meta:n = { #2 = {##1} } }
  }

% short:
\acro_declare_key_generic:nnn {short} {short}
  {
    \__acro_first_key_check:n {#1}
    \prop_put:Nnn \l__acro_short_prop      {#1} {#2}
    \prop_put:Nnn \l__acro_sort_prop       {#1} {#1}
    \prop_put:Nnn \l__acro_index_sort_prop {#1} {#1}
    \prop_put:Nnn \l__acro_alt_prop        {#1} {#2}
    \prop_put:Nnx \l__acro_pdfstring_prop  {#1} { \exp_not:n {#2} }
    \prop_put:Nnn \l__acro_short_plural_prop
      {#1} { \l__acro_default_plural_tl }
    \prop_put:Nnx \l__acro_short_indefinite_prop
      {#1} { \l__acro_default_indefinite_tl }
    \prop_put:Nnx \l__acro_alt_indefinite_prop
      {#1} { \l__acro_default_indefinite_tl }
    \prop_put:Nnx \l__acro_pdfstring_plural_prop
      {#1} { \exp_not:n {#2} \exp_not:V \l__acro_default_plural_tl }
  }

% short plural:
\acro_declare_simple_key:n {short-plural}

% long:
\acro_declare_key:nnn {long} {long}
  {
    \prop_put:Nnn \l__acro_long_plural_form_prop {#1} { \c_false_bool }
    \prop_put:Nnx \l__acro_long_indefinite_prop
      {#1} { \l__acro_default_indefinite_tl }
    \bool_if:cF { l__acro_#1_long-plural_set_bool }
      {
        \prop_put:Nnn \l__acro_long_plural_prop
          {#1} { \l__acro_default_plural_tl }
      }
  }

% list:
\acro_declare_simple_key:n {list}

% long plural:
\acro_declare_key:nnn {long_plural} {long-plural}
  { \prop_put:Nnn \l__acro_long_plural_form_prop {#1} { \c_false_bool } }

% long plural form:
\acro_declare_key_generic:nnn {long_plural_form} {long-plural-form}
  {
    \__acro_key_check:nn {#1} { long-plural-form }
    \prop_put:Nnn \l__acro_long_plural_form_prop {#1} { \c_true_bool }
    \prop_put:Nnn \l__acro_long_plural_prop {#1} {#2}
  }

% short indefinite article:
\acro_declare_simple_key:n {short-indefinite}

% long indefinite article:
\acro_declare_simple_key:n {long-indefinite}

% pre long:
\acro_declare_simple_key:n {long-pre}

% post long:
\acro_declare_simple_key:n {long-post}

% sort:
\acro_declare_key:nnn {sort} {sort}
  {
    \bool_if:cF { l__acro_#1_index-sort_set_bool }
      { \prop_put:Nnn \l__acro_index_sort_prop {#1} {#2} }
  }

% alternative:
\acro_declare_key:nnn {alt} {alt}
  {
    \prop_put:Nnx \l__acro_alt_indefinite_prop
      {#1} { \l__acro_default_indefinite_tl }
  }

% alt. indefinite article:
\acro_declare_simple_key:n {alt-indefinite}

% foreign:
\acro_declare_simple_key:n {foreign}

% format:
\acro_declare_simple_key:n {format}

% short format:
\acro_declare_key_alias:nn {short-format} {format}

% long format:
\acro_declare_simple_key:n {long-format}

% first long format:
\acro_declare_simple_key:n {first-long-format}

% pdfstring:
\prop_new:N \l__acro_pdfstring_prop
\prop_new:N \l__acro_pdfstring_plural_prop
\cs_new_protected:Npn \__acro_declare_pdfstring:nw #1#2/#3/#4 \acro_stop:
  {
    \__acro_key_check:nn {#1} { pdfstring }
    \prop_put:Nnx \l__acro_pdfstring_prop {#1} {#2}
    \tl_if_empty:nTF { #3 }
      {
        \prop_put:Nnx \l__acro_pdfstring_plural_prop
          {#1} { \exp_not:n {#2} \exp_not:V \l__acro_default_plural_tl }
      }
      {
        \prop_put:Nnx \l__acro_pdfstring_plural_prop
          {#1} { \exp_not:n { #2#3 } }
      }
  }
\cs_generate_variant:Nn \__acro_declare_pdfstring:nw { V }
\keys_define:nn { acro / declare-acronym }
  {
    pdfstring    .code:n =
      \__acro_declare_pdfstring:Vw \l__acro_current_key_tl #1 // \acro_stop: ,
  }

% class:
\acro_declare_simple_key:n {class}

% extra information:
\acro_declare_simple_key:n {extra}

% acc supp:
\acro_declare_key:nn {acc_supp} {accsupp}

% citation:
\prop_new:N \l__acro_citation_prop
\prop_new:N \l__acro_citation_pre_prop
\prop_new:N \l__acro_citation_post_prop
\cs_new_protected:Npn \__acro_declare_citation:nw #1#2[#3]#4[#5]#6#7 \acro_stop:
  {
    % no options: #1: ID, #2: key, #3 is blank
    % 1 option:   #1: ID, #4: key, #3: option, #5 is blank
    % 2 options:  #1: ID: #6: key, #3: first option, #5: second option
    \tl_if_blank:nF { #2#4#6 }
      {
        \tl_if_empty:nTF { #3 }
          { \__acro_declare_citation_aux:nnnn {#1} { } { } {#2} }
          {
            \tl_if_empty:nTF { #5 }
              { \__acro_declare_citation_aux:nnnn {#1} { #3 } {    } { #4 } }
              { \__acro_declare_citation_aux:nnnn {#1} { #3 } { #5 } { #6 } }
          }
      }
  }
\cs_generate_variant:Nn \__acro_declare_citation:nw { V }

\keys_define:nn { acro / declare-acronym }
  {
    cite .code:n =
      \__acro_declare_citation:Vw
        \l__acro_current_key_tl #1 [][] \scan_stop: \acro_stop:
  }

\cs_new_protected:Npn \__acro_declare_citation_aux:nnnn #1#2#3#4
  {
    \__acro_key_check:nn {#1} { cite }
    \prop_put:Nnn \l__acro_citation_prop {#1} { #4 }
    \tl_if_empty:nF {#2}
      { \prop_put:Nnn \l__acro_citation_pre_prop {#1} {#2} }
    \tl_if_empty:nF { #3 }
      { \prop_put:Nnn \l__acro_citation_post_prop {#1} { #3 } }
  }

% TODO:
% add index entries, by default \index{<sort>@<short>}
% index: overwrite default <sort>@<short> entry completely
% index-sort: overwrite the <sort> part of <sort>@<short> entry

% need to take care of custom index cmd, at least
%  - \index{}
%  - \index[]{}
% question is, though, if it should be the same one for all acronyms?
% I go for yes but would also add a `post' key that allows to add arbitrary
% TeX code after an acronym is typeset

% index:
\acro_declare_simple_key:n {index}

% index-sort:
\acro_declare_simple_key:n {index-sort}

% index-cmd:
\acro_declare_simple_key:n {index-cmd}

% --------------------------------------------------------------------------
% acronym macros:
\cs_new_protected:Npn \acro_define_acronym_macro:n #1
  {
    \bool_if:NT \l__acro_create_macros_bool
      {
        \cs_if_exist:cTF {#1}
          {
            \bool_if:NTF \l__acro_strict_bool
              { \cs_set:cpn {#1} { \ac {#1} \acro_xspace: } }
              { \acro_serious_message:nnn {acro} {macro} {#1} }
          }
          { \cs_new:cpn {#1} { \ac {#1} \acro_xspace: } }
      }
  }

% --------------------------------------------------------------------------
% internal acronym declaring function:
\cs_new_protected:Npn \acro_declare_acronym:nn #1#2
  {
    \tl_set:Nn \l__acro_current_key_tl {#1}
    \keys_set:nn { acro / declare-acronym } {#2}
    \bool_new:c { g__acro_#1_first_use_bool }
    \bool_new:c { g__acro_#1_used_bool }
    \bool_new:c { g__acro_#1_label_bool }
    \bool_new:c { g__acro_#1_in_list_bool }
    \bool_if:NF \l__acro_print_only_used_bool
      { \bool_gset_true:c { g__acro_#1_in_list_bool } }
    \acro_create_page_records:n {#1}
    \acro_define_acronym_macro:n {#1}
    \tl_clear:N \l__acro_current_key_tl
    \bool_if:cF { l__acro_#1_short_set_bool }
      { \acro_serious_message:nnnn {acro} {missing} {#1} {short} }
    \bool_if:cF { l__acro_#1_long_set_bool }
      { \acro_serious_message:nnnn {acro} {missing} {#1} {long} }
  }

% --------------------------------------------------------------------------
% the user command:
\NewDocumentCommand \DeclareAcronym { mm }
  { \acro_declare_acronym:nn {#1} {#2} }
% \@onlypreamble\DeclareAcronym

% --------------------------------------------------------------------------
% print the list:
% #1: list of classes
% #2: list of excluded classes
\tl_new:N \l__acro_included_classes_tl
\tl_new:N \l__acro_excluded_classes_tl

\cs_new_protected:Npn \acro_use_list_instance:nn #1#2
  {
    \UseInstance { acro-list } { \l__acro_list_instance_tl }
      { \l__acro_list_type_tl } {#1} {#2}
  }
\cs_generate_variant:Nn \acro_use_list_instance:nn { VV }

\keys_define:nn { acro / print-acronyms }
  {
    include-classes .tl_set:N   = \l__acro_included_classes_tl ,
    exclude-classes .tl_set:N   = \l__acro_excluded_classes_tl ,
    name            .tl_set:N   = \l__acro_list_name_tl ,
    header          .code:n     =
      \acro_option_deprecated:nn { header } { heading }
      \tl_set:Nn \l__acro_list_title_tl {#1} ,
    heading         .tl_set:N   = \l__acro_list_title_tl ,
    sort            .bool_set:N = \l__acro_sort_bool
  }

\cs_new_protected:Npn \acro_print_acronyms:n #1
  {
    \group_begin:
      % this is a cheap trick to prevent the \@noitemerr
      % if one forgot to delete either the aux file or
      % remove \printacronyms -- but it's local:
      \cs_set:Npn \@noitemerr {}
      \tl_clear:N \l__acro_included_classes_tl
      \tl_clear:N \l__acro_excluded_classes_tl
      \keys_set:nn { acro / print-acronyms } {#1}
      \iow_now:Nx \@auxout { \string \acro@print@list }
      \bool_if:NT \l__acro_sort_bool
        { \acro_sort_prop:N \l__acro_short_prop }
      \UseInstance { acro-title } { \l__acro_list_title_tl }
        { \l__acro_list_name_tl }
      \cs_if_exist:NTF \acro@printed@list
        {
          \acro_use_list_instance:VV
            \l__acro_included_classes_tl
            \l__acro_excluded_classes_tl
        }
        { \@latex@warning@no@line {Rerun~to~get~acronym~list~right} }
    \group_end:
  }

\NewDocumentCommand \printacronyms { O{} }
  { \acro_print_acronyms:n {#1} }
\tex_endinput:D
