\RequirePackage{expl3,xparse,l3keys2e,xtemplate,xspace}
\ProvidesExplPackage
  {acro}
  {2012/06/16}
  {0.01}
  {Acronyms}

% error messages:
\msg_new:nnnn { acro } { undefined }
  { You've~requested~acronym~`#1'~but~it~seems~that~it~was~never~defined! }
  {
    You've~requested~acronym~`#1'~\msg_line_context: \c_space_tl but~you~
    apperantly~haven't~defined~it,~yet!~Maybe~you've~mispelled~it?
  }

% package options:
% variables
\bool_new:N \l_acro_use_xspace_bool
\bool_new:N \l_acro_use_single_bool
\tl_new:N   \l_acro_short_format_tl
\tl_new:N   \l_acro_first_instance_tl
\tl_set:Nn  \l_acro_first_instance_tl { default }

% options:
\keys_define:nn { acro }
  {
    xspace         .bool_set:N = \l_acro_use_xspace_bool ,
    format         .tl_set:N   = \l_acro_short_format_tl ,
    single         .bool_set:N = \l_acro_use_single_bool ,
    first-instance .tl_set:N   = \l_acro_first_instance_tl
  }

% setup command:
\NewDocumentCommand \acsetup { m }
  { \keys_set:nn { acro } { #1 } }

% variables:
\prop_new:N \l_acro_short_prop
\prop_new:N \l_acro_alt_prop
\prop_new:N \l_acro_long_prop
\prop_new:N \l_acro_class_prop
\prop_new:N \l_acro_replace_plural_prop
\prop_new:N \l_acro_short_plural_prop
\prop_new:N \l_acro_long_plural_prop
\bool_new:N \l_acro_use_plural_bool
\tl_new:N   \l_acro_short_tl
\tl_new:N   \l_acro_alt_tl
\tl_new:N   \l_acro_long_tl

% adding an acronym, internal command:
% #1: command
% #2: id
% #3: short
% #4: alt
% #5: long
% #6: class
% #7: use/replace plural (boolean)
% #8: short plural
% #9: long plural
\cs_new:Npn \acro_new:nnnnnnnnn #1#2#3#4#5#6#7#8#9
  {
    \IfNoValueTF { #3 }
      { \prop_put:Nnn \l_acro_short_prop { #2 } { #2 } }
      { \prop_put:Nnn \l_acro_short_prop { #2 } { #3 } }
    \IfNoValueTF { #4 }
      { \prop_put:Nnn \l_acro_alt_prop { #2 } { #2 } }
      { \prop_put:Nnn \l_acro_alt_prop { #2 } { #4 } }
    \prop_put:Nnn \l_acro_long_prop { #2 } { #5 }
    \IfNoValueF { #6 }
      { \prop_put:Nnn \l_acro_class_prop { #2 } { #6 } }
    \IfBooleanTF { #7 }
      { \prop_put:Nnn \l_acro_replace_plural_prop { #2 } { \c_true_bool } }
      { \prop_put:Nnn \l_acro_replace_plural_prop { #2 } { \c_false_bool } }
    \IfNoValueTF { #8 }
      { \prop_put:Nnn \l_acro_short_plural_prop { #2 } { s } }
      { \prop_put:Nnn \l_acro_short_plural_prop { #2 } { #8 } }
    \IfNoValueTF { #9 }
      { \prop_put:Nnn \l_acro_long_plural_prop { #2 } { s } }
      { \prop_put:Nnn \l_acro_long_plural_prop { #2 } { #9 } }
    \bool_new:c { g_acro_#2_used_bool }
    \cs_new:Npn #1
      {
        \bool_if:NTF \l_acro_use_xspace_bool
          { \acro_use:n { #2 } \xspace }
          { \acro_use:n { #2 }  }
      }
  }

% typeset the shortcut:
\cs_new:Npn \acro_write:n #1
  {
    \group_begin:
      \tl_use:N \l_acro_short_format_tl
      #1
    \group_end:
  }
\cs_generate_variant:Nn \acro_write:n { V }

\bool_new:N \l_acro_first_use_brackets_bool
\tl_new:N   \l_acro_first_brackets_tl

% #1: short
% #2: long
\DeclareObjectType { acro-first } { 2 }

\DeclareTemplateInterface { acro-first } { text } { 2 }
  {
    brackets      : boolean   = true ,
    brackets-type : tokenlist = ()
  }
\DeclareTemplateCode { acro-first } { text } { 2 }
  {
    brackets      = \l_acro_first_use_brackets_bool ,
    brackets-type = \l_acro_first_brackets_tl
  }
  {
    \AssignTemplateKeys
    #2
    \tl_use:N \c_space_tl
    \bool_if:NT \l_acro_first_use_brackets_bool
      { \tl_head:N \l_acro_first_brackets_tl }
    \group_begin:
      \acro_write:n { #1 }
    \group_end:
    \bool_if:NT \l_acro_first_use_brackets_bool
      { \tl_tail:N \l_acro_first_brackets_tl }
  }

\DeclareTemplateInterface { acro-first } { footnote } { 2 } { }
\DeclareTemplateCode { acro-first } { footnote } { 2 } { }
  {
    \AssignTemplateKeys
    \acro_write:n { #1 } \footnote { #2 } 
  }

\DeclareInstance { acro-first } { default  } { text     } { }
\DeclareInstance { acro-first } { square   } { text     } { brackets-type = [] }
\DeclareInstance { acro-first } { footnote } { footnote } { }

% automatic typesetting, the internals of \ac:
% #1: id
\cs_new:Npn \acro_use:n #1
  {
    \bool_if:cT { g_acro_#1_used_bool }
      { \iow_now:Nx \@auxout { \string \acro@used@twice { #1 } } }
    \acro_get:n { #1 }
    \acro_set_plural:n { #1 }
    \bool_if:cTF { g_acro_#1_used_bool }
      { \acro_write:V \l_acro_short_tl }
      {
        \bool_gset_true:c { g_acro_#1_used_bool }
        \bool_if:nTF { !\l_acro_use_single_bool || \cs_if_exist_p:c { acro@#1 } }
          { 
            \UseInstance { acro-first } { \l_acro_first_instance_tl }
              { \l_acro_short_tl } { \l_acro_long_tl }
          }
          { \acro_write:V \l_acro_long_tl }
      }
  }

\cs_new:Npn \acro_get:n #1
  {
    \prop_get:NnNF \l_acro_short_prop { #1 } \l_acro_short_tl
      { \msg_error:nnx { acro } { undefined } { #1 } }
    \prop_get:NnN \l_acro_long_prop { #1 } \l_acro_long_tl
    \prop_get:NnN \l_acro_alt_prop { #1 } \l_acro_alt_tl
  }

\cs_new:Npn \acro_set_plural:n #1
  {
    \bool_if:NT \l_acro_use_plural_bool
      {
        \bool_if:nTF { \prop_get:Nn \l_acro_replace_plural_prop { #1 } }
          {
            \prop_get:NnN \l_acro_short_plural_prop { #1 } \l_acro_short_tl
            \prop_get:NnN \l_acro_short_plural_prop { #1 } \l_acro_alt_tl
            \prop_get:NnN \l_acro_long_plural_prop { #1 } \l_acro_long_tl
          }
          {
            \tl_put_right:Nn \l_acro_short_tl
              { \prop_get:Nn \l_acro_short_plural_prop { #1 } }
            \tl_put_right:Nn \l_acro_alt_tl
              { \prop_get:Nn \l_acro_short_plural_prop { #1 } }
            \tl_put_right:Nn \l_acro_long_tl
              { \prop_get:Nn \l_acro_long_plural_prop { #1 } }
          }
      }
  }

\cs_new:Npn \acro@used@twice #1
  { \expandafter\xdef\csname acro@#1 \endcsname { #1 } }

\AtEndDocument
  {
    \cs_set:Npn \acro@used@twice #1
      {
        \def\reserved@a{#1}%
        \expandafter\ifx\csname acro@#1\endcsname\reserved@a\else
        \@tempswatrue\fi
      }
  }

% get short entry:
\cs_new:Npn \acro_short:n #1
  {
    \acro_get:n { #1 }
    \acro_set_plural:n { #1 }
    \acro_write:V \l_acro_short_tl
  }

% get alternative entry:
\cs_new:Npn \acro_alt:n #1
  {
    \acro_get:n { #1 }
    \acro_set_plural:n { #1 }
    \acro_write:V \l_acro_alt_tl
  }

% get long entry:
\cs_new:Npn \acro_long:n #1
  {
    \acro_get:n { #1 }
    \acro_set_plural:n { #1 }
    \acro_write:V \l_acro_long_tl
  }

% output like the first time:
\cs_new:Npn \acro_first:n #1
  {
    \acro_get:n { #1 }
    \acro_set_plural:n { #1 }
    \UseInstance { acro-first } { \l_acro_first_instance_tl }
      { \l_acro_short_tl } { \l_acro_long_tl }
  }

% --------------------------------------------------------------------------
% USER COMMANDS
% adding an acronym, user command:
% #1: command
% #2: id
% #3: short
% #4: alt
% #5: long
% #6: class
% #7: use/replace plural (boolean)
% #8: short plural
% #9: long plural
\NewDocumentCommand \NewAcronym { mmoomosgg }
  { \acro_new:nnnnnnnnn { #1 } { #2 } { #3 } { #4 } { #5 } { #6 } { #7 } { #8 } { #9 } }
\@onlypreamble \NewAcronym

% automatic:
\NewDocumentCommand \ac { m }
  { \acro_use:n { #1 } }

\NewDocumentCommand \acp { m }
  {
    \group_begin:
      \bool_set_true:N \l_acro_use_plural_bool
      \acro_use:n { #1 }
    \group_end:
  }

% short:
\NewDocumentCommand \acs { m }
  { \acro_short:n { #1 } }

\NewDocumentCommand \acsp { m }
  {
    \group_begin:
      \bool_set_true:N \l_acro_use_plural_bool
      \acro_short:n { #1 }
    \group_end:
  }

% alt:
\NewDocumentCommand \aca { m }
  { \acro_alt:n { #1 } }

\NewDocumentCommand \acap { m }
  {
    \group_begin:
      \bool_set_true:N \l_acro_use_plural_bool
      \acro_alt:n { #1 }
    \group_end:
  }

% long:
\NewDocumentCommand \acl { m }
  { \acro_long:n { #1 } }

\NewDocumentCommand \aclp { m }
  {
    \group_begin:
      \bool_set_true:N \l_acro_use_plural_bool
      \acro_long:n { #1 }
    \group_end:
  }

% first:
\NewDocumentCommand \acf { m }
  { \acro_first:n { #1 } }

\NewDocumentCommand \acfp { m }
  {
    \group_begin:
      \bool_set_true:N \l_acro_use_plural_bool
      \acro_first:n { #1 }
    \group_end:
  }

% reset outputs, they'll behave like the first time again (!not like the _only_
% time!):
\NewDocumentCommand \acreset {}
  {
    \prop_map_inline:Nn \l_acro_short_prop
      { \bool_gset_false:c { g_acro_##1_used_bool } }
  }

% typeset the list:
\NewDocumentCommand \printacronyms { G{} }
  {
    \begin{description}
      \prop_map_inline:Nn \l_acro_short_prop
        {
          \bool_if:nT
            {
              ( \l_acro_use_single_bool && \cs_if_exist_p:c { acro@##1 } ) ||
              ! \l_acro_use_single_bool
            }
            {
              \tl_if_blank:nTF { #1 }
                {
                  \item[\acro_write:n{##2}]
                  \prop_get:Nn \l_acro_long_prop { ##1 }
                }
                {
                  \clist_map_inline:nn { #1 }
                    {
                      \prop_get:NnNT \l_acro_class_prop { ##1 } \l_tmpa_tl
                        {
                          \tl_set:Nn \l_tmpb_tl { ####1 }
                          \tl_trim_spaces:N \l_tmpa_tl
                          \tl_trim_spaces:N \l_tmpb_tl
                          \tl_if_eq:NNT \l_tmpa_tl \l_tmpb_tl
                            {
                              \item[\acro_write:n{##2}]
                              \prop_get:Nn \l_acro_long_prop { ##1 }
                            }
                        }
                    }
                }
            }
        }
    \end{description}
  }

\ProcessKeysOptions { acro }

\tex_endinput:D
% TODO:
- Support für verschiedene Darstellungen der Acronym-Liste (incl. Sprachsupport)
  => templates
- kompatibilität mit fnpct herstellen.
- Support, um in verschiedene Klassen zu unterteilen und \printacronyms
  anpassen